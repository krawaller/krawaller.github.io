(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{"0NKm":function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/reflux-refinement",function(){var e=t("g6en");return{page:e.default||e}}])},g6en:function(e,a,t){"use strict";t.r(a);var l=t("q1tI"),n=t.n(l),s=t("JRaF"),r=t("YFqc"),c=t.n(r),m={url:"reflux-refinement",id:"refluxrefinement",title:"Reflux refinement",author:"david",tags:["react","reflux"],date:"2014-10-31",excerpt:"Looking at some improvements in newer Reflux versions",type:"post",folder:"/Users/davidwaller/gitreps/mine/blog2/sources/2014-10-31_refluxrefinement",hasStaticContent:!1,headlines:[{level:3,text:"Flux &gt; Reflux?",id:"flux-gt-reflux"},{level:3,text:"Throwing Mixin into the mixer",id:"throwing-mixin-into-the-mixer"},{level:3,text:"Using a factory call as a mixin",id:"using-a-factory-call-as-a-mixin"},{level:3,text:"Connecting state",id:"connecting-state"},{level:3,text:"Much wants more",id:"much-wants-more"},{level:3,text:"Wrapping up",id:"wrapping-up"}]};a.default=function(){return n.a.createElement(s.a,{kind:"post",data:m,title:"Reflux refinement",summary:"Looking at some improvements in newer Reflux versions",headlines:[{level:3,text:"Flux &gt; Reflux?",id:"flux-gt-reflux"},{level:3,text:"Throwing Mixin into the mixer",id:"throwing-mixin-into-the-mixer"},{level:3,text:"Using a factory call as a mixin",id:"using-a-factory-call-as-a-mixin"},{level:3,text:"Connecting state",id:"connecting-state"},{level:3,text:"Much wants more",id:"much-wants-more"},{level:3,text:"Wrapping up",id:"wrapping-up"}],tags:["react","reflux"]},n.a.createElement("div",{className:"post","data-postid":"refluxrefinement"},n.a.createElement("h3",{id:"flux--reflux"},"Flux > Reflux?"),n.a.createElement("p",null,"In a ",n.a.createElement(c.a,{href:"/posts/react-js-architecture-flux-vs-reflux",prefetch:!0},n.a.createElement("a",null,"somewhat recent post"))," I walked through how much simpler the codebase of a small React app became when I switched out ",n.a.createElement("a",{href:"http://facebook.github.io/react/docs/flux-overview.html"},"Flux")," for ",n.a.createElement("a",{href:"https://github.com/spoike/refluxjs"},"Reflux"),"."),n.a.createElement("p",null,'However, I kind of glossed over that in one of the comparisons Flux actually "won" by a single LOC! It was the one comparing components listening to store changes:'),n.a.createElement("pre",null,n.a.createElement("code",{className:"hljs"},n.a.createElement("span",{className:"hljs-comment"},"// Flux version"),n.a.createElement("br",null),n.a.createElement("span",{className:"hljs-keyword"},"var")," Cart = React.createClass({",n.a.createElement("br",null),"  componentDidMount:",n.a.createElement("span",{className:"hljs-function"},n.a.createElement("span",{className:"hljs-keyword"},"function"),n.a.createElement("span",{className:"hljs-params"},"()")),"{",n.a.createElement("br",null),"    appStore.addChangeListener(",n.a.createElement("span",{className:"hljs-keyword"},"this"),"._onStuffChange)",n.a.createElement("br",null),"  },",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-comment"},"// rest redacted"),n.a.createElement("br",null),"});",n.a.createElement("br",null),n.a.createElement("br",null),n.a.createElement("span",{className:"hljs-comment"},"// Reflux version"),n.a.createElement("br",null),n.a.createElement("span",{className:"hljs-keyword"},"var")," Cart = React.createClass({",n.a.createElement("br",null),"  mixins: [Reflux.ListenerMixin],",n.a.createElement("br",null),"  componentDidMount: ",n.a.createElement("span",{className:"hljs-function"},n.a.createElement("span",{className:"hljs-keyword"},"function"),n.a.createElement("span",{className:"hljs-params"},"()")," "),"{",n.a.createElement("br",null),"    ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".listenTo(appStore, ",n.a.createElement("span",{className:"hljs-keyword"},"this"),"._onStuffChange);",n.a.createElement("br",null),"  },",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-comment"},"// rest redacted"),n.a.createElement("br",null),"});")),n.a.createElement("p",null,"In the Reflux we need the additional ",n.a.createElement("code",null,"mixins")," row, which makes it even more boilerplaty than the Flux version!"),n.a.createElement("h3",{id:"throwing-mixin-into-the-mixer"},"Throwing Mixin into the mixer"),n.a.createElement("p",null,"Let's take a peek at the internals of ",n.a.createElement("code",null,"ListenerMixin")," to see what's going on there. Here's the full object:"),n.a.createElement("pre",null,n.a.createElement("code",{className:"hljs language-javascript"},"ListenerMixin = {",n.a.createElement("br",null),"    ",n.a.createElement("span",{className:"hljs-attr"},"componentWillMount"),": ",n.a.createElement("span",{className:"hljs-function"},n.a.createElement("span",{className:"hljs-keyword"},"function"),"(",n.a.createElement("span",{className:"hljs-params"}),") "),"{",n.a.createElement("br",null),"        ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".subscriptions = [];",n.a.createElement("br",null),"    },",n.a.createElement("br",null),"    ",n.a.createElement("span",{className:"hljs-attr"},"listenTo"),": ",n.a.createElement("span",{className:"hljs-function"},n.a.createElement("span",{className:"hljs-keyword"},"function"),"(",n.a.createElement("span",{className:"hljs-params"},"listenable, callback, defaultCallback"),") "),"{",n.a.createElement("br",null),"        ",n.a.createElement("span",{className:"hljs-keyword"},"var")," unsubscribe = listenable.listen(callback, ",n.a.createElement("span",{className:"hljs-keyword"},"this"),");",n.a.createElement("br",null),"        ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".subscriptions.push(unsubscribe);",n.a.createElement("br",null),"        _.handleDefaultCallback(",n.a.createElement("span",{className:"hljs-keyword"},"this"),", listenable, defaultCallback);",n.a.createElement("br",null),"    },",n.a.createElement("br",null),"    ",n.a.createElement("span",{className:"hljs-attr"},"componentWillUnmount"),": ",n.a.createElement("span",{className:"hljs-function"},n.a.createElement("span",{className:"hljs-keyword"},"function"),"(",n.a.createElement("span",{className:"hljs-params"}),") "),"{",n.a.createElement("br",null),"        ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".subscriptions.forEach(",n.a.createElement("span",{className:"hljs-function"},n.a.createElement("span",{className:"hljs-keyword"},"function"),"(",n.a.createElement("span",{className:"hljs-params"},"unsubscribe"),") "),"{",n.a.createElement("br",null),"            unsubscribe();",n.a.createElement("br",null),"        });",n.a.createElement("br",null),"        ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".subscriptions = [];",n.a.createElement("br",null),"    }",n.a.createElement("br",null),"};")),n.a.createElement("p",null,"As you can see it supplies the ",n.a.createElement("code",null,"listenTo")," method we used, as well as two life cycle methods, ",n.a.createElement("code",null,"componentWillMount")," and ",n.a.createElement("code",null,"componentWillUnmount"),", dealing with setup and teardown of the listener."),n.a.createElement("p",null,"Note the cleverness of the Reflux listenables - a call to their ",n.a.createElement("code",null,"listen")," method returns an ",n.a.createElement("code",null,"unsubscribe")," function, which takes care of all the cleanup for you when called."),n.a.createElement("h3",{id:"using-a-factory-call-as-a-mixin"},"Using a factory call as a mixin"),n.a.createElement("p",null,"Looking at the source code got me thinking - why couldn't the mixin provide the ",n.a.createElement("code",null,"componentDidMount")," call too? Well, that's where the call to ",n.a.createElement("code",null,"listenTo")," happens, which needs a reference to the listenable and some callbacks."),n.a.createElement("p",null,"So how about we give those to a factory instead, which then bakes out a mixin for us? After several iterations and thoughtful input from Reflux creator Mikael, we now have a mixin factory which imports the listening functionality and sets up the listener to the given listenable. "),n.a.createElement("p",null,"This means that this verbose Reflux version that lost to Flux..."),n.a.createElement("pre",null,n.a.createElement("code",{className:"hljs"},n.a.createElement("span",{className:"hljs-keyword"},"var")," Cart = React.createClass({",n.a.createElement("br",null),"  mixins: [Reflux.ListenerMixin],",n.a.createElement("br",null),"  componentDidMount: ",n.a.createElement("span",{className:"hljs-function"},n.a.createElement("span",{className:"hljs-keyword"},"function"),n.a.createElement("span",{className:"hljs-params"},"()")," "),"{",n.a.createElement("br",null),"    ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".listenTo(appStore, ",n.a.createElement("span",{className:"hljs-keyword"},"this"),"._onStuffChange);",n.a.createElement("br",null),"  },",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-comment"},"// rest redacted"),n.a.createElement("br",null),"});")),n.a.createElement("p",null,"...can now be reduced to this:"),n.a.createElement("pre",null,n.a.createElement("code",{className:"hljs language-javascript"},n.a.createElement("span",{className:"hljs-keyword"},"var")," Cart = React.createClass({",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-attr"},"mixins"),": [Reflux.listenTo(appStore,",n.a.createElement("span",{className:"hljs-string"},"'_onStuffChange'"),")],",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-comment"},"// rest redacted"),n.a.createElement("br",null),"});")),n.a.createElement("p",null,"Three lines shorter than the Flux version! Mission accomplished! "),n.a.createElement("p",null,"Note how we can't use ",n.a.createElement("code",null,"this._onStuffChange")," as an argument to the factory call, as ",n.a.createElement("code",null,"this")," doesn't point to the instance at this point in time."),n.a.createElement("p",null,"The idea of using mixin factories have also been used in other places in the new Reflux version."),n.a.createElement("h3",{id:"connecting-state"},"Connecting state"),n.a.createElement("p",null,"Consider what might be going on in ",n.a.createElement("code",null,"_onStuffChange")," in the above example. A very common scenario when a React component listens to a Reflux Store is that we want to update the state of the component with the data sent from the store."),n.a.createElement("p",null,"Since this is such a prevalent use case, Reflux now has a convenience method for this. Instead of the listenTo factory we can use the connect factory:"),n.a.createElement("pre",null,n.a.createElement("code",{className:"hljs"},n.a.createElement("span",{className:"hljs-keyword"},"var")," Cart = React.createClass({",n.a.createElement("br",null),"  mixins: [Reflux.connect(appStore)],",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-comment"},"// rest redacted (and doesn't need to contain a callback at all)"),n.a.createElement("br",null),"});")),n.a.createElement("p",null,"This will set the state of the component to whatever is transmitted from the store. If you want the store data as a property of your state, you can instead do ",n.a.createElement("code",null,"connect(publisher,propname)"),"."),n.a.createElement("h3",{id:"much-wants-more"},"Much wants more"),n.a.createElement("p",null,"The ",n.a.createElement(c.a,{href:"/posts/react-js-architecture-flux-vs-reflux",prefetch:!0},n.a.createElement("a",null,"previous post"))," also contained a Store comparison, which Reflux won by a wide margin. However, the winning code was still rather verbose:"),n.a.createElement("pre",null,n.a.createElement("code",{className:"hljs language-javascript"},"Reflux.createStore({",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-attr"},"init"),": ",n.a.createElement("span",{className:"hljs-function"},n.a.createElement("span",{className:"hljs-keyword"},"function"),"(",n.a.createElement("span",{className:"hljs-params"}),") "),"{",n.a.createElement("br",null),"    ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".listenTo(actions.addItem,_addItem);",n.a.createElement("br",null),"    ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".listenTo(actions.removeItem,_removeItem);",n.a.createElement("br",null),"    ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".listenTo(actions.increaseItem,_increaseItem);",n.a.createElement("br",null),"    ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".listenTo(actions.decreaseItem,_decreaseItem);",n.a.createElement("br",null),"  },",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-comment"},"// rest redacted"),n.a.createElement("br",null),"});")),n.a.createElement("p",null,"The new version introduces a ",n.a.createElement("code",null,"listenToMany")," function which can be given an object where the values are publishers and the keys are assumed to correspond to methods on the listening object. If ",n.a.createElement("code",null,"_addItem"),", ",n.a.createElement("code",null,"_removeItem")," etc were local methods, that means the above code could be reduced to this:"),n.a.createElement("pre",null,n.a.createElement("code",{className:"hljs language-javascript"},"Reflux.createStore({",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-attr"},"init"),": ",n.a.createElement("span",{className:"hljs-function"},n.a.createElement("span",{className:"hljs-keyword"},"function"),"(",n.a.createElement("span",{className:"hljs-params"}),") "),"{",n.a.createElement("br",null),"    ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".listenToMany({",n.a.createElement("br",null),"        ",n.a.createElement("span",{className:"hljs-attr"},"_addItem"),":actions.addItem,",n.a.createElement("br",null),"        ",n.a.createElement("span",{className:"hljs-attr"},"_removeItem"),":actions.removeItem,",n.a.createElement("br",null),"        ",n.a.createElement("span",{className:"hljs-attr"},"_increaseItem"),":actions.increaseItem,",n.a.createElement("br",null),"        ",n.a.createElement("span",{className:"hljs-attr"},"_decreaseItem"),":actions.decreaseItem",n.a.createElement("br",null),"    );",n.a.createElement("br",null),"  },",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-comment"},"// rest redacted"),n.a.createElement("br",null),"});")),n.a.createElement("p",null,"Somewhat elegant, but still very noisy. However, if we change the callback names to correspond to the action names, we could simply do this:"),n.a.createElement("pre",null,n.a.createElement("code",{className:"hljs language-javascript"},"Reflux.createStore({",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-attr"},"init"),": ",n.a.createElement("span",{className:"hljs-function"},n.a.createElement("span",{className:"hljs-keyword"},"function"),"(",n.a.createElement("span",{className:"hljs-params"}),") "),"{",n.a.createElement("br",null),"    ",n.a.createElement("span",{className:"hljs-keyword"},"this"),".listenToMany(actions);",n.a.createElement("br",null),"  },",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-comment"},"// rest redacted"),n.a.createElement("br",null),"});")),n.a.createElement("p",null,"Now things are really beginning to shine! As an added bonus you can call your method ",n.a.createElement("code",null,"onActionname"),", and Reflux will realise it is a callback for ",n.a.createElement("code",null,"actionname"),"."),n.a.createElement("p",null,"But we're not done yet! We can make it leaner still through the new ",n.a.createElement("code",null,"listenables")," property:"),n.a.createElement("pre",null,n.a.createElement("code",{className:"hljs language-javascript"},"Reflux.createStore({",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-attr"},"listenables"),": actions,",n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"hljs-comment"},"// rest redacted"),n.a.createElement("br",null),"});")),n.a.createElement("h3",{id:"wrapping-up"},"Wrapping up"),n.a.createElement("p",null,"What I'm really trying to say is this; Reflux has grown by leaps and bounds, meaning your code will shrink proportionally! Old API:s have gotten more powerful, and new functionality has been added."),n.a.createElement("p",null,"I'm still amazed at the power of Mikael's simpler Flux model, and if you haven't tried Reflux out yet I strongly encourage you to do so!")),n.a.createElement("hr",null))}}},[["0NKm",1,0]]]);