(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{OG40:function(e,t,a){"use strict";a.r(t);var n=a("q1tI"),l=a.n(n),s=a("JRaF"),r=(a("YFqc"),{url:"unit-testing-react-redux-components",id:"unittestingreactredux",type:"post",title:"Unit testing ReactRedux components",date:"2020-09-07",tags:["react","redux"],author:"david",excerpt:"A convenient approach for testing React components connected via ReactRedux",folder:"/Users/davidwaller/gitreps/mine/blog2/sources/2020-09-07_test_reactredux",hasStaticContent:!1,headlines:[{level:3,text:"Premise",id:"premise"},{level:3,text:"Test subject",id:"test-subject"},{level:3,text:"Arranging - how not to do it",id:"arranging-how-not-to-do-it"},{level:3,text:"Arranging - another way of how not to do it",id:"arranging-another-way-of-how-not-to-do-it"},{level:3,text:"Arranging, how to actually do it",id:"arranging-how-to-actually-do-it"},{level:3,text:"Acting - rendering strategies",id:"acting-rendering-strategies"},{level:3,text:"Asserting render",id:"asserting-render"},{level:3,text:"Acting behaviour",id:"acting-behaviour"}]});t.default=function(){return l.a.createElement(s.a,{kind:"post",data:r,title:"Unit testing ReactRedux components",summary:"A convenient approach for testing React components connected via ReactRedux",headlines:[{level:3,text:"Premise",id:"premise"},{level:3,text:"Test subject",id:"test-subject"},{level:3,text:"Arranging - how not to do it",id:"arranging-how-not-to-do-it"},{level:3,text:"Arranging - another way of how not to do it",id:"arranging-another-way-of-how-not-to-do-it"},{level:3,text:"Arranging, how to actually do it",id:"arranging-how-to-actually-do-it"},{level:3,text:"Acting - rendering strategies",id:"acting-rendering-strategies"},{level:3,text:"Asserting render",id:"asserting-render"},{level:3,text:"Acting behaviour",id:"acting-behaviour"}],tags:["react","redux"]},l.a.createElement("div",{className:"post","data-postid":"unittestingreactredux"},l.a.createElement("h3",{id:"premise"},"Premise"),l.a.createElement("p",null,"hard! mock what?"),l.a.createElement("p",null,"avoid testing implementation detail. what is the API layer? this means do not mock selectors, or ... avoid faking state. might be we test unreachable scenarios"),l.a.createElement("h3",{id:"test-subject"},"Test subject"),l.a.createElement("p",null,"Wanna test this component:"),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},l.a.createElement("span",{className:"hljs-keyword"},"export")," ",l.a.createElement("span",{className:"hljs-keyword"},"const")," CurrentLegoSetImage = ",l.a.createElement("span",{className:"hljs-function"},l.a.createElement("span",{className:"hljs-params"},"()")," =>")," {",l.a.createElement("br",null),"  ",l.a.createElement("span",{className:"hljs-keyword"},"const")," ",l.a.createElement("span",{className:"hljs-keyword"},"set")," = useSelector(selectCurrentSet);",l.a.createElement("br",null),"  const dispatch = useDispatch();",l.a.createElement("br",null),"  const zoomHandler = () => dispatch(zoomImage(",l.a.createElement("span",{className:"hljs-keyword"},"set"),".imgUrl));",l.a.createElement("br",null),"  return (",l.a.createElement("br",null),'    <div className="legoImg">',l.a.createElement("br",null),"      <img onClick={zoomHandler} src={",l.a.createElement("span",{className:"hljs-keyword"},"set"),'.imgUrl} data-testid="setimg" />',l.a.createElement("br",null),"    </div>",l.a.createElement("br",null),"  );",l.a.createElement("br",null),"};")),l.a.createElement("p",null,"Two things to test:"),l.a.createElement("ol",null,l.a.createElement("li",null,"it renders the current set image"),l.a.createElement("li",null,"it dispatches correct action when image is clicked")),l.a.createElement("p",null,"Gonna start with the first!"),l.a.createElement("h3",{id:"arranging---how-not-to-do-it"},"Arranging - how not to do it"),l.a.createElement("p",null,"So - how do we test that the component renders the current set?"),l.a.createElement("p",null,"A na\xefve approach would be to notice this line..."),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},l.a.createElement("span",{className:"hljs-keyword"},"const")," ",l.a.createElement("span",{className:"hljs-keyword"},"set")," = useSelector(selectCurrentSet);")),l.a.createElement("p",null,"...and decide to simply mock ",l.a.createElement("code",null,"selectCurrentSet")," to return a fixture set."),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},"jest.mock(",l.a.createElement("span",{className:"hljs-string"},'"../selectors"'),", () => ({",l.a.createElement("br",null),"  ...jest.requireActual(",l.a.createElement("span",{className:"hljs-string"},'"../selectors"'),"),",l.a.createElement("br",null),"  ",l.a.createElement("span",{className:"hljs-attr"},"selectCurrentSet"),": jest.fn().mockReturnValue(fixtureSet),",l.a.createElement("br",null),"}));")),l.a.createElement("p",null,"But this has big downside; we have now made assumptions about the component implementation in our test. If we change the component to use a different selector, the test will stop working."),l.a.createElement("p",null,"Mocking ",l.a.createElement("code",null,"useSelector")," isn't better. We're still in implementation detail land, assuming we're dealing with a hook component and not a class component using the ReactRedux ",l.a.createElement("code",null,".connect")," method."),l.a.createElement("h3",{id:"arranging---another-way-of-how-not-to-do-it"},"Arranging - another way of how not to do it"),l.a.createElement("p",null,"We don't want our test to mess with how the component connects to the store. Instead we want to ensure our store gets the state we want, and then let the component do its thing."),l.a.createElement("p",null,"So we could hand-craft the app state we need:"),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},l.a.createElement("span",{className:"hljs-keyword"},"const")," testAppState = {",l.a.createElement("br",null),"  ...defaultAppState,",l.a.createElement("br",null),"  ",l.a.createElement("span",{className:"hljs-attr"},"sets"),": {",l.a.createElement("br",null),"    ...defaultAppState.sets,",l.a.createElement("br",null),"    ",l.a.createElement("span",{className:"hljs-attr"},"data"),": {",l.a.createElement("br",null),"      [fixtureSet.id]: fixtureSet, ",l.a.createElement("span",{className:"hljs-comment"},"// injecting the fixture set into the data"),l.a.createElement("br",null),"    },",l.a.createElement("br",null),"  },",l.a.createElement("br",null),"  ",l.a.createElement("span",{className:"hljs-attr"},"ui"),": {",l.a.createElement("br",null),"    ...defaultAppState.ui,",l.a.createElement("br",null),"    ",l.a.createElement("span",{className:"hljs-attr"},"currentSetId"),": fixtureSet.id, ",l.a.createElement("span",{className:"hljs-comment"},'// setting our fixture set as the "current" set'),l.a.createElement("br",null),"  },",l.a.createElement("br",null),"};")),l.a.createElement("p",null,"And then use that state to seed a new store instance:"),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},l.a.createElement("span",{className:"hljs-keyword"},"const")," store = createStore(rootReducer, testAppState);")),l.a.createElement("p",null,"Now we can use that store in our test, and things should be dandy."),l.a.createElement("p",null,"But, this still isn't ideal!"),l.a.createElement("ul",null,l.a.createElement("li",null,"We're depending on knowing the shape of the state (granted, not a biggie if we're using TS, but still inelegant)"),l.a.createElement("li",null,"We run the risk of testing a scenario that isn't achievable in actual app usage, which could mean the test is pointless")),l.a.createElement("h3",{id:"arranging-how-to-actually-do-it"},"Arranging, how to actually do it"),l.a.createElement("p",null,"Instead, we want to get our fixture set into place the same way it normally would get there - by using action creators to fire actions into the store!"),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},"store.dispatch(loadSetsSuccess({ [fixtureSet.id]: fixtureSet }));",l.a.createElement("br",null),"store.dispatch(setCurrentSet(fixtureSet.id));")),l.a.createElement("p",null,"Now we're truly using the same API versus the Redux layer as the app. It also makes the test setup very readable, if you've named your action creators appropriately!"),l.a.createElement("h3",{id:"acting---rendering-strategies"},"Acting - rendering strategies"),l.a.createElement("p",null,"Now we want to render our component within the context of that store. How do we do that?"),l.a.createElement("p",null,"As a reminder, this is what a test-library test usually looks like:"),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},l.a.createElement("span",{className:"hljs-keyword"},"import")," { render } ",l.a.createElement("span",{className:"hljs-keyword"},"from")," ",l.a.createElement("span",{className:"hljs-string"},"'@testing-library/react'"),l.a.createElement("br",null),l.a.createElement("br",null),l.a.createElement("span",{className:"hljs-comment"},"// ...and inside a test:"),l.a.createElement("br",null),l.a.createElement("br",null),l.a.createElement("span",{className:"hljs-keyword"},"const")," testLibAPI = render( ",l.a.createElement("span",{className:"xml"},l.a.createElement("span",{className:"hljs-tag"},"<",l.a.createElement("span",{className:"hljs-name"},"CurrentLegoSetImage")," ",l.a.createElement("span",{className:"hljs-attr"},"some"),"=",l.a.createElement("span",{className:"hljs-string"},"{props}"),">")," )"))),l.a.createElement("p",null,"The simplest way to use the store with our test state would be to wrap the JSX given to the test library ",l.a.createElement("code",null,"render")," function with the ReactRedux store provider:"),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},l.a.createElement("span",{className:"hljs-keyword"},"const")," testLibAPI = render(",l.a.createElement("br",null),"  ",l.a.createElement("span",{className:"xml"},l.a.createElement("span",{className:"hljs-tag"},"<",l.a.createElement("span",{className:"hljs-name"},"Provider")," ",l.a.createElement("span",{className:"hljs-attr"},"store"),"=",l.a.createElement("span",{className:"hljs-string"},"{store}"),">"),l.a.createElement("br",null),"    ",l.a.createElement("span",{className:"hljs-tag"},"<",l.a.createElement("span",{className:"hljs-name"},"MyComponent")," ",l.a.createElement("span",{className:"hljs-attr"},"some"),"=",l.a.createElement("span",{className:"hljs-string"},"{props}"),">"),l.a.createElement("br",null),"  ",l.a.createElement("span",{className:"hljs-tag"},"</",l.a.createElement("span",{className:"hljs-name"},"Provider"),">"),l.a.createElement("br",null),")"))),l.a.createElement("p",null,"But having to do this for every single test render grows old pretty fast! I therefore like to make a helper function that does the provider wrapping for you:"),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},l.a.createElement("span",{className:"hljs-keyword"},"import")," { render } ",l.a.createElement("span",{className:"hljs-keyword"},"from")," ",l.a.createElement("span",{className:"hljs-string"},'"@testing-library/react"'),";",l.a.createElement("br",null),l.a.createElement("span",{className:"hljs-keyword"},"import")," { Provider } ",l.a.createElement("span",{className:"hljs-keyword"},"from")," ",l.a.createElement("span",{className:"hljs-string"},'"react-redux"'),";",l.a.createElement("br",null),l.a.createElement("br",null),l.a.createElement("span",{className:"hljs-keyword"},"const")," TestProvider = ",l.a.createElement("span",{className:"hljs-function"},"(",l.a.createElement("span",{className:"hljs-params"},"{ store, children }"),") =>")," (",l.a.createElement("br",null),"  ",l.a.createElement("span",{className:"xml"},l.a.createElement("span",{className:"hljs-tag"},"<",l.a.createElement("span",{className:"hljs-name"},"Provider")," ",l.a.createElement("span",{className:"hljs-attr"},"store"),"=",l.a.createElement("span",{className:"hljs-string"},"{store}"),">"),"{children}",l.a.createElement("span",{className:"hljs-tag"},"</",l.a.createElement("span",{className:"hljs-name"},"Provider"),">")),l.a.createElement("br",null),");",l.a.createElement("br",null),l.a.createElement("br",null),l.a.createElement("span",{className:"hljs-keyword"},"export")," ",l.a.createElement("span",{className:"hljs-function"},l.a.createElement("span",{className:"hljs-keyword"},"function")," ",l.a.createElement("span",{className:"hljs-title"},"testRender"),"(",l.a.createElement("span",{className:"hljs-params"},"ui, { store, ...otherOpts }"),") "),"{",l.a.createElement("br",null),"  ",l.a.createElement("span",{className:"hljs-comment"},"// passing call on to render from"),l.a.createElement("br",null),"  ",l.a.createElement("span",{className:"hljs-keyword"},"return")," render(",l.a.createElement("span",{className:"xml"},l.a.createElement("span",{className:"hljs-tag"},"<",l.a.createElement("span",{className:"hljs-name"},"TestProvider")," ",l.a.createElement("span",{className:"hljs-attr"},"store"),"=",l.a.createElement("span",{className:"hljs-string"},"{store}"),">"),"{ui}",l.a.createElement("span",{className:"hljs-tag"},"</",l.a.createElement("span",{className:"hljs-name"},"TestProvider"),">")),", otherOpts);",l.a.createElement("br",null),"}")),l.a.createElement("p",null,"Now our test ",l.a.createElement("code",null,"testRender")," becomes this instead:"),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},l.a.createElement("span",{className:"hljs-keyword"},"const")," testLibAPI = testRender(",l.a.createElement("span",{className:"xml"},l.a.createElement("span",{className:"hljs-tag"},"<",l.a.createElement("span",{className:"hljs-name"},"MyComponent")," ",l.a.createElement("span",{className:"hljs-attr"},"some"),"=",l.a.createElement("span",{className:"hljs-string"},"{props}"),">"),", { store });"))),l.a.createElement("h3",{id:"asserting-render"},"Asserting render"),l.a.createElement("p",null,"With what we've talked about so far, we have enough to write a full test for ensuring that ",l.a.createElement("code",null,"CurrentLegoSetImage")," renders the correct image:"),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},"describe(",l.a.createElement("span",{className:"hljs-string"},'"The CurrentLegoSetImage component"'),", () => {",l.a.createElement("br",null),"  it(",l.a.createElement("span",{className:"hljs-string"},'"shows the correct image"'),", () => {",l.a.createElement("br",null),"    ",l.a.createElement("span",{className:"hljs-comment"},"// Arrange"),l.a.createElement("br",null),"    ",l.a.createElement("span",{className:"hljs-keyword"},"const")," store = makeStore(); ",l.a.createElement("span",{className:"hljs-comment"},"// same func we use in the actual app"),l.a.createElement("br",null),"    store.dispatch(loadSetsSuccess({ [fixtureSet.id]: fixtureSet }));",l.a.createElement("br",null),"    store.dispatch(setCurrentSet(fixtureSet.id));",l.a.createElement("br",null),l.a.createElement("br",null),"    ",l.a.createElement("span",{className:"hljs-comment"},"// Act"),l.a.createElement("br",null),"    ",l.a.createElement("span",{className:"hljs-keyword"},"const")," { getByTestId } = testRender(",l.a.createElement("span",{className:"xml"},l.a.createElement("span",{className:"hljs-tag"},"<",l.a.createElement("span",{className:"hljs-name"},"LegoSetImage")," />"),", { store });",l.a.createElement("br",null),l.a.createElement("br",null),"    // Assert",l.a.createElement("br",null),'    expect(getByTestId("setimg")).toHaveAttribute("src", fixtureSet.imgUrl);',l.a.createElement("br",null),"  });",l.a.createElement("br",null),"});"))),l.a.createElement("p",null,"Readable, no assumptions about implementation detail, no mocking or other magic."),l.a.createElement("h3",{id:"acting-behaviour"},"Acting behaviour"),l.a.createElement("p",null,"But, that was just the first half of the testing done. As we said initially we also need to test the zooming functionality!"),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},l.a.createElement("span",{className:"hljs-keyword"},"const")," zoomHandler = ",l.a.createElement("span",{className:"hljs-function"},l.a.createElement("span",{className:"hljs-params"},"()")," =>")," dispatch(zoomImage(",l.a.createElement("span",{className:"hljs-keyword"},"set"),".imgUrl));")),l.a.createElement("p",null,"In other words, we want to ensure that when the image is clicked, a zoom happens!"),l.a.createElement("p",null,"Doing the click in our test is easy enough. We get hold of the ",l.a.createElement("code",null,"fireEvent")," helper from the testing library..."),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},l.a.createElement("span",{className:"hljs-keyword"},"import")," { fireEvent } ",l.a.createElement("span",{className:"hljs-keyword"},"from")," ",l.a.createElement("span",{className:"hljs-string"},'"@testing-library/react"'),";")),l.a.createElement("p",null,"...and then simply use that to fire the click on the rendered ",l.a.createElement("code",null,"img")," element in our unit test:"),l.a.createElement("pre",null,l.a.createElement("code",{className:"hljs language-javascript"},l.a.createElement("span",{className:"hljs-keyword"},"const")," { getByTestId } = testRender(",l.a.createElement("span",{className:"xml"},l.a.createElement("span",{className:"hljs-tag"},"<",l.a.createElement("span",{className:"hljs-name"},"LegoSetImage")," />"),", { store });",l.a.createElement("br",null),'fireEvent.click(getByTestId("setimg"));')))),l.a.createElement("hr",null))}},"gYs+":function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/unit-testing-react-redux-components",function(){var e=a("OG40");return{page:e.default||e}}])}},[["gYs+",1,0]]]);